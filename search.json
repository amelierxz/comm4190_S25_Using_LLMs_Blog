[
  {
    "objectID": "posts/3 missing number.html",
    "href": "posts/3 missing number.html",
    "title": "Third post about a math problem",
    "section": "",
    "text": "A teacher writes five numbers on the board:\n3, 5, 9, 17, ?\nShe tells her students that the pattern follows a logical rule.\nWhat number should replace the question mark (?) in the sequence?\nCan you figure it out?\n\n\nTo determine the missing number, let‚Äôs analyze the pattern in the sequence:\n3, 5, 9, 17, ?\nWe examine the differences between consecutive terms:\n5 ‚àí 3 = 2\n9 - 5 = 4\n17 ‚àí 9 = 8\nThis gives us the difference sequence:\n2, 4, 8\nObserving this pattern, we see that each difference doubles the previous one:\n2 , 4 , 8 , 16\nFollowing this doubling pattern, the next difference should be 16.\nThus, the missing number in the sequence is:\n17+16=33 ### Answer: 33"
  },
  {
    "objectID": "posts/3 missing number.html#solving-the-pattern",
    "href": "posts/3 missing number.html#solving-the-pattern",
    "title": "Third post about a math problem",
    "section": "",
    "text": "To determine the missing number, let‚Äôs analyze the pattern in the sequence:\n3, 5, 9, 17, ?\nWe examine the differences between consecutive terms:\n5 ‚àí 3 = 2\n9 - 5 = 4\n17 ‚àí 9 = 8\nThis gives us the difference sequence:\n2, 4, 8\nObserving this pattern, we see that each difference doubles the previous one:\n2 , 4 , 8 , 16\nFollowing this doubling pattern, the next difference should be 16.\nThus, the missing number in the sequence is:\n17+16=33 ### Answer: 33"
  },
  {
    "objectID": "posts/3 missing number.html#gpt-4os-approach",
    "href": "posts/3 missing number.html#gpt-4os-approach",
    "title": "Third post about a math problem",
    "section": "GPT-4o‚Äôs Approach",
    "text": "GPT-4o‚Äôs Approach\nGPT-4o follows a structured method to detect numerical patterns. It:\nIdentifies the differences between terms. Recognizes a doubling pattern in these differences. Extends the pattern logically to predict the next term. Computes the missing number using the established rule. üìå GPT-4o‚Äôs Answer: 33."
  },
  {
    "objectID": "posts/3 missing number.html#gpt-4o1s-approach",
    "href": "posts/3 missing number.html#gpt-4o1s-approach",
    "title": "Third post about a math problem",
    "section": "GPT-4o1‚Äôs Approach",
    "text": "GPT-4o1‚Äôs Approach\nGPT-4o1 arrives at the same conclusion using a similar approach:\nIt calculates the first-order differences: 2, 4, 8. It recognizes that each difference is doubling. It predicts the next difference as 16. It adds 16 to the last number (17) to find 33. üìå GPT-4o1‚Äôs Answer: 33."
  },
  {
    "objectID": "posts/3 missing number.html#reflection",
    "href": "posts/3 missing number.html#reflection",
    "title": "Third post about a math problem",
    "section": "Reflection:",
    "text": "Reflection:\nThis was my second time using AI to tackle a logic-based challenge, but this time I shifted my focus to a numerical question instead of a purely logical one. Once again, I was amazed by the AI‚Äôs ability to uncover the underlying patterns in the problem and reach the same conclusion I did. Its quick ability for recognizing structure and efficiently following logical sequences was really clear, sparking my curiosity about how AI processes various types of information.\nWhat I find especially intriguing is the difference between AI‚Äôs strengths and weaknesses. While it excelled in this more complex, structured task, we‚Äôve also observed it struggling with simpler problems, like counting the number of ‚Äôr‚Äôs in the word ‚Äústrawberry‚Äù as we spoke about earlier this semester. This disparity raises interesting questions about how AI interprets information and where its limitations might be. It seems that AI thrives when it operates within a clearly defined framework, particularly when dealing with numerical or pattern-based reasoning. However, it tends to fail and struggle with tasks that require more flexible cognitive skills, such as interpretation, contextual understanding, or ambiguities in language."
  },
  {
    "objectID": "posts/2 logic problem/index.html",
    "href": "posts/2 logic problem/index.html",
    "title": "Interesting word logic problem",
    "section": "",
    "text": "A logic problem for LLMs\n\nRead the following and see if you can answer the question:\n\n\nThe Stolen Key (created by GPT 4o)\n\nFour friends‚ÄîAlex, Ben, Cara, and Dana‚Äîwere the only people in a locked house when the front door key went missing. Each of them made a statement:\n\nAlex: ‚ÄúI didn‚Äôt take the key.‚Äù\n\nBen: ‚ÄúCara took the key.‚Äù\n\nCara: ‚ÄúDana is lying.‚Äù\n\nDana: ‚ÄúBen is lying.‚Äù\n\nOnly one of them is telling the truth. Who stole the key?\n\n\nHow do LLMs response to the prompt?\n\nGPT4o\nLet‚Äôs analyze the statements logically:\n\nOnly one person is telling the truth.\nIf Ben were telling the truth (‚ÄúCara took the key‚Äù), then all other statements must be false.\n\nAlex saying ‚ÄúI didn‚Äôt take the key‚Äù would be false ‚Üí meaning Alex did take the key. This contradicts Ben‚Äôs claim.\nTherefore, Ben is lying.\n\n\nSince Ben is lying, Cara did not take the key. That means we must find another truth-teller.\n\nIf Cara were telling the truth (‚ÄúDana is lying‚Äù), then:\n\nDana saying ‚ÄúBen is lying‚Äù would be false, meaning Ben is telling the truth.\nBut we already established that Ben was lying, so this contradicts our assumption.\n\n\nSince Cara cannot be the truth-teller either, let‚Äôs check Dana.\n\nIf Dana were telling the truth (‚ÄúBen is lying‚Äù), then:\n\nBen‚Äôs statement (‚ÄúCara took the key‚Äù) is false ‚Üí meaning Cara did NOT take the key.\nThat makes Alex‚Äôs statement (‚ÄúI didn‚Äôt take the key‚Äù) false ‚Üí meaning Alex DID take the key.\n\n\nSince this setup is consistent and only one truth-teller exists, the key was stolen by Alex.\n\n\nGPT4o1\nAnswer: Alex took the key.\nHere‚Äôs a quick way to see why:\n\nAssume Dana is telling the truth (‚ÄúBen is lying‚Äù).\nIf Ben is lying, then ‚ÄúCara took the key‚Äù is false, so Cara did not take the key.\nBecause only one statement can be true, Alex‚Äôs and Cara‚Äôs statements must be false:\n\nAlex‚Äôs statement ‚ÄúI didn‚Äôt take the key‚Äù is false, so Alex did take the key.\nCara‚Äôs statement ‚ÄúDana is lying‚Äù is false, meaning Dana is indeed telling the truth.\n\n\nAll conditions are satisfied with Dana telling the truth and Alex as the thief.\n\n\nAnalysis of LLM Reasoning\nThis problem is an example of how LLMs process logical constraints. Given the one-truth constraint, LLMs systematically eliminate contradictions to arrive at a valid solution.\nNotably, both GPT-4o and GPT-4o1 reached the same answer through slightly different reasoning:\nGPT-4o used a step-by-step contradiction approach, testing each individual‚Äôs truthfulness and discarding inconsistencies. GPT-4o1 opted for a more streamlined deduction, assuming Dana‚Äôs truthfulness and resolving the logical consequences. This exercise highlights LLMs‚Äô ability to process deductive logic, truth-value constraints, and contradictions, making them effective at solving structured reasoning puzzles.\nWould another LLM produce the same answer? Would performance change if the statements were reworded? Testing across different models could reveal nuances in AI logical reasoning and bias towards specific deduction styles.\nWhat do you think‚Äîshould we test other AI models on this problem?\nI found this super interesting after trying to make this logic problem out of boredom - and attempting to capture how AI can think through a reasoning problem that humans typically attack in a non-linear fashion. While both different GPT models ended up getting the right result, I was fasicinated by the different methods that the two models used, that were logical but did not at all follow the same framework.\nIn the future, I really want to experiment more with how to use AI to attack these sorts of reasoning problems that may not have a clear direct answer, and think about the actual thinking process of the AI LLM behind it."
  },
  {
    "objectID": "posts/04_PEGAI_Ch1_ab_testing_example.html",
    "href": "posts/04_PEGAI_Ch1_ab_testing_example.html",
    "title": "Prompt comparison example",
    "section": "",
    "text": "https://learning.oreilly.com/library/view/prompt-engineering-for/9781098153427/ch01.html\nNotebook from: https://github.com/BrightPool/prompt-engineering-for-generative-ai-examples\n\n\n\n\nimport pandas as pd\nfrom openai import OpenAI\nimport os\n\nimport ipywidgets as widgets\nfrom IPython.display import display\n\nfrom dotenv import load_dotenv\n_ = load_dotenv()\n\n\n\n\n\n# Define two variants of the prompt to test zero-shot\n# vs few-shot:\nprompt_A = \"\"\"Product description: A pair of shoes that can\nfit any foot size.\nSeed words: adaptable, fit, omni-fit.\nProduct names:\"\"\"\n\nprompt_B = \"\"\"Product description: A home milkshake maker.\nSeed words: fast, healthy, compact.\nProduct names: HomeShaker, Fit Shaker, QuickShake, Shake\nMaker\n\nProduct description: A watch that can tell accurate time in\nspace.\nSeed words: astronaut, space-hardened, eliptical orbit\nProduct names: AstroTime, SpaceGuard, Orbit-Accurate,\nEliptoTime.\n\nProduct description: A pair of shoes that can fit any foot\nsize.\nSeed words: adaptable, fit, omni-fit.\nProduct names:\"\"\"\n\ntest_prompts = [prompt_A, prompt_B]\n\n\n\n# Set your OpenAI key as an environment variable\n# https://platform.openai.com/api-keys\nclient = OpenAI()\n\ndef get_response(prompt):\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": prompt\n            }\n        ]\n    )\n    return response.choices[0].message.content\n\n\n\n\n\n\n# Iterate through the prompts and get responses\nresponses = []\nnum_tests = 5\n\nfor idx, prompt in enumerate(test_prompts):\n    # prompt number as a letter\n    var_name = chr(ord('A') + idx)\n\n    for i in range(num_tests):\n        # Get a response from the model\n        response = get_response(prompt)\n\n        data = {\n            \"variant\": var_name,\n            \"prompt\": prompt, \n            \"response\": response\n            }\n        responses.append(data)\n\n# Convert responses into a dataframe\ndf = pd.DataFrame(responses)\n\n# Save the dataframe as a CSV file\ndf.to_csv(\"responses.csv\", index=False)\n\nprint(df)\n\n  variant                                             prompt  \\\n0       A  Product description: A pair of shoes that can\\...   \n1       A  Product description: A pair of shoes that can\\...   \n2       A  Product description: A pair of shoes that can\\...   \n3       A  Product description: A pair of shoes that can\\...   \n4       A  Product description: A pair of shoes that can\\...   \n5       B  Product description: A home milkshake maker.\\n...   \n6       B  Product description: A home milkshake maker.\\n...   \n7       B  Product description: A home milkshake maker.\\n...   \n8       B  Product description: A home milkshake maker.\\n...   \n9       B  Product description: A home milkshake maker.\\n...   \n\n                                            response  \n0  1. OmniFit Shoes\\n2. AdaptiFit Footwear\\n3. Ve...  \n1  1. OmniFit Shoes\\n2. VersaFit Footwear\\n3. Fle...  \n2  1. OmniFitSole Shoes\\n2. AdaptFlex Footwear\\n3...  \n3  1. OmniFit Solemates\\n2. AdaptaFit Footwear So...  \n4  1. AdaptaFit Shoes\\n2. OmniFootwear\\n3. Infini...  \n5  AdaptiFit Shoes, OmniSize Sneakers, AllFit Foo...  \n6  AdaptiFit Shoes, FitFlex Sneakers, OmniFit Foo...  \n7        AdaptaFit, OmniStep, PerfectFit, SizeReady.  \n8  AdaptaShoe, OmniFit Footwear, PerfectFit Shoes...  \n9           AdaptiFit, OmniShoe, FitFlex, SizeSavvy.  \n\n\n\n\n\n\n\n\n# load the responses.csv file\ndf = pd.read_csv(\"responses.csv\")\n\n# Shuffle the dataframe\ndf = df.sample(frac=1).reset_index(drop=True)\n\n# df is your dataframe and 'response' is the column with the \n# text you want to test\nresponse_index = 0\n# add a new column to store feedback\ndf['feedback'] = pd.Series(dtype='str') \n\ndef on_button_clicked(b):\n    global response_index\n    #  convert thumbs up / down to 1 / 0\n    user_feedback = 1 if b.description == \"\\U0001F44D\" else 0\n\n    # update the feedback column\n    df.at[response_index, 'feedback'] = user_feedback\n\n    response_index += 1\n    if response_index &lt; len(df):\n        update_response()\n    else:\n        # save the feedback to a CSV file\n        df.to_csv(\"results.csv\", index=False)\n\n        \ndef update_response():\n    new_response = df.iloc[response_index]['response']\n    if pd.notna(new_response):\n        new_response = \"&lt;p&gt;\" + new_response + \"&lt;/p&gt;\"\n    else:\n        new_response = \"&lt;p&gt;No response&lt;/p&gt;\"\n    response.value = new_response\n    count_label.value = f\"Response: {response_index + 1}\"\n    count_label.value += f\"/{len(df)}\"\n\nresponse = widgets.HTML()\ncount_label = widgets.Label()\n\nupdate_response()\n\nthumbs_up_button = widgets.Button(description='\\U0001F44D')\nthumbs_up_button.on_click(on_button_clicked)\n\nthumbs_down_button = widgets.Button(\n    description='\\U0001F44E')\nthumbs_down_button.on_click(on_button_clicked)\n\nbutton_box = widgets.HBox([thumbs_down_button, \nthumbs_up_button])\n\ndisplay(response, button_box, count_label)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(\"A/B testing completed. Here's the results:\")\n# Calculate score and num rows for each variant\nsummary_df = df.groupby('variant').agg(\n    count=('feedback', 'count'), \n    score=('feedback', 'mean')).reset_index()\nprint(summary_df)\n\nA/B testing completed. Here's the results:\n  variant  count score\n0       A      0   NaN\n1       B      0   NaN"
  },
  {
    "objectID": "posts/04_PEGAI_Ch1_ab_testing_example.html#from-ch.-1-of-prompt-engineering-for-generative-ai",
    "href": "posts/04_PEGAI_Ch1_ab_testing_example.html#from-ch.-1-of-prompt-engineering-for-generative-ai",
    "title": "Prompt comparison example",
    "section": "",
    "text": "https://learning.oreilly.com/library/view/prompt-engineering-for/9781098153427/ch01.html\nNotebook from: https://github.com/BrightPool/prompt-engineering-for-generative-ai-examples\n\n\n\n\nimport pandas as pd\nfrom openai import OpenAI\nimport os\n\nimport ipywidgets as widgets\nfrom IPython.display import display\n\nfrom dotenv import load_dotenv\n_ = load_dotenv()\n\n\n\n\n\n# Define two variants of the prompt to test zero-shot\n# vs few-shot:\nprompt_A = \"\"\"Product description: A pair of shoes that can\nfit any foot size.\nSeed words: adaptable, fit, omni-fit.\nProduct names:\"\"\"\n\nprompt_B = \"\"\"Product description: A home milkshake maker.\nSeed words: fast, healthy, compact.\nProduct names: HomeShaker, Fit Shaker, QuickShake, Shake\nMaker\n\nProduct description: A watch that can tell accurate time in\nspace.\nSeed words: astronaut, space-hardened, eliptical orbit\nProduct names: AstroTime, SpaceGuard, Orbit-Accurate,\nEliptoTime.\n\nProduct description: A pair of shoes that can fit any foot\nsize.\nSeed words: adaptable, fit, omni-fit.\nProduct names:\"\"\"\n\ntest_prompts = [prompt_A, prompt_B]\n\n\n\n# Set your OpenAI key as an environment variable\n# https://platform.openai.com/api-keys\nclient = OpenAI()\n\ndef get_response(prompt):\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": prompt\n            }\n        ]\n    )\n    return response.choices[0].message.content\n\n\n\n\n\n\n# Iterate through the prompts and get responses\nresponses = []\nnum_tests = 5\n\nfor idx, prompt in enumerate(test_prompts):\n    # prompt number as a letter\n    var_name = chr(ord('A') + idx)\n\n    for i in range(num_tests):\n        # Get a response from the model\n        response = get_response(prompt)\n\n        data = {\n            \"variant\": var_name,\n            \"prompt\": prompt, \n            \"response\": response\n            }\n        responses.append(data)\n\n# Convert responses into a dataframe\ndf = pd.DataFrame(responses)\n\n# Save the dataframe as a CSV file\ndf.to_csv(\"responses.csv\", index=False)\n\nprint(df)\n\n  variant                                             prompt  \\\n0       A  Product description: A pair of shoes that can\\...   \n1       A  Product description: A pair of shoes that can\\...   \n2       A  Product description: A pair of shoes that can\\...   \n3       A  Product description: A pair of shoes that can\\...   \n4       A  Product description: A pair of shoes that can\\...   \n5       B  Product description: A home milkshake maker.\\n...   \n6       B  Product description: A home milkshake maker.\\n...   \n7       B  Product description: A home milkshake maker.\\n...   \n8       B  Product description: A home milkshake maker.\\n...   \n9       B  Product description: A home milkshake maker.\\n...   \n\n                                            response  \n0  1. OmniFit Shoes\\n2. AdaptiFit Footwear\\n3. Ve...  \n1  1. OmniFit Shoes\\n2. VersaFit Footwear\\n3. Fle...  \n2  1. OmniFitSole Shoes\\n2. AdaptFlex Footwear\\n3...  \n3  1. OmniFit Solemates\\n2. AdaptaFit Footwear So...  \n4  1. AdaptaFit Shoes\\n2. OmniFootwear\\n3. Infini...  \n5  AdaptiFit Shoes, OmniSize Sneakers, AllFit Foo...  \n6  AdaptiFit Shoes, FitFlex Sneakers, OmniFit Foo...  \n7        AdaptaFit, OmniStep, PerfectFit, SizeReady.  \n8  AdaptaShoe, OmniFit Footwear, PerfectFit Shoes...  \n9           AdaptiFit, OmniShoe, FitFlex, SizeSavvy.  \n\n\n\n\n\n\n\n\n# load the responses.csv file\ndf = pd.read_csv(\"responses.csv\")\n\n# Shuffle the dataframe\ndf = df.sample(frac=1).reset_index(drop=True)\n\n# df is your dataframe and 'response' is the column with the \n# text you want to test\nresponse_index = 0\n# add a new column to store feedback\ndf['feedback'] = pd.Series(dtype='str') \n\ndef on_button_clicked(b):\n    global response_index\n    #  convert thumbs up / down to 1 / 0\n    user_feedback = 1 if b.description == \"\\U0001F44D\" else 0\n\n    # update the feedback column\n    df.at[response_index, 'feedback'] = user_feedback\n\n    response_index += 1\n    if response_index &lt; len(df):\n        update_response()\n    else:\n        # save the feedback to a CSV file\n        df.to_csv(\"results.csv\", index=False)\n\n        \ndef update_response():\n    new_response = df.iloc[response_index]['response']\n    if pd.notna(new_response):\n        new_response = \"&lt;p&gt;\" + new_response + \"&lt;/p&gt;\"\n    else:\n        new_response = \"&lt;p&gt;No response&lt;/p&gt;\"\n    response.value = new_response\n    count_label.value = f\"Response: {response_index + 1}\"\n    count_label.value += f\"/{len(df)}\"\n\nresponse = widgets.HTML()\ncount_label = widgets.Label()\n\nupdate_response()\n\nthumbs_up_button = widgets.Button(description='\\U0001F44D')\nthumbs_up_button.on_click(on_button_clicked)\n\nthumbs_down_button = widgets.Button(\n    description='\\U0001F44E')\nthumbs_down_button.on_click(on_button_clicked)\n\nbutton_box = widgets.HBox([thumbs_down_button, \nthumbs_up_button])\n\ndisplay(response, button_box, count_label)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(\"A/B testing completed. Here's the results:\")\n# Calculate score and num rows for each variant\nsummary_df = df.groupby('variant').agg(\n    count=('feedback', 'count'), \n    score=('feedback', 'mean')).reset_index()\nprint(summary_df)\n\nA/B testing completed. Here's the results:\n  variant  count score\n0       A      0   NaN\n1       B      0   NaN"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Explorations with LLMs",
    "section": "",
    "text": "Prompt comparison example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the openai Text Completions API\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChat GPT for Excel\n\n\n\n\n\n\nLLMs\n\n\naccounting\n\n\nExcel\n\n\n\nArranging my personal expense of January and February with AI\n\n\n\n\n\nMar 3, 2024\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nUsing GPT for French\n\n\n\n\n\n\nLLMs\n\n\nFrench\n\n\nlanguage learning\n\n\n\nReflecting on my tutoring session last weekend\n\n\n\n\n\nFeb 22, 2024\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nSose‚Äôs expertise: LA\n\n\n\n\n\n\nLLMs\n\n\nin class\n\n\n\nNot best city\n\n\n\n\n\nFeb 12, 2024\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nGame theory problem\n\n\n\n\n\n\nLLMs\n\n\ngame theory\n\n\nlogic\n\n\n\nRolling dice\n\n\n\n\n\nFeb 7, 2024\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nA test post\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nAn example post from a Jupyter notebook\n\n\n\n\n\nFeb 2, 2024\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nInteresting word logic problem\n\n\n\n\n\n\nLLMs\n\n\nword problem\n\n\nlogic\n\n\n\nTrying to figure out how to use this thing\n\n\n\n\n\nFeb 2, 2024\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nThird post about a math problem\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nTrying to figure out how to use this thing\n\n\n\n\n\nFeb 2, 2024\n\n\nAn LLM User\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/5 LA.html",
    "href": "posts/5 LA.html",
    "title": "Sose‚Äôs expertise: LA",
    "section": "",
    "text": "LA is a city that‚Äôs hard to pin down‚Äîit‚Äôs massive, spread out, and full of contradictions. One minute you‚Äôre stuck in traffic on the 405, and the next you‚Äôre driving along the coast with the most unreal sunset in front of you. There‚Äôs the Hollywood glamour, sure, but also the grittier, more creative side‚Äîstreet art in the Arts District, taco trucks that serve better food than any five-star restaurant, and a music scene that always feels like it‚Äôs one step ahead of everywhere else. It‚Äôs a place where everyone seems to be chasing something, whether it‚Äôs a career in entertainment, a startup dream, or just the perfect beach day.\nBut LA isn‚Äôt just what you see in the movies. It‚Äôs got this weird mix of being both super laid-back and insanely competitive at the same time. People wear yoga pants everywhere and act like they don‚Äôt care, but also hustle harder than anyone. The neighborhoods feel like their own little worlds‚ÄîSilver Lake is all about indie coffee shops and thrift stores, while Beverly Hills is just straight-up luxury. And then there‚Äôs Koreatown, where you can get the best late-night food, or Venice, where every other person is skating or filming something for TikTok. It‚Äôs a city that can feel overwhelming, but also kind of magical if you know where to look.\nWhat I love most about LA is how, despite its craziness, there‚Äôs always room to breathe. You can escape to Malibu or hike up to Griffith Observatory and get this insane view of the whole city stretching out forever. There‚Äôs something about that mix‚Äîcity and nature, ambition and chill‚Äîthat makes LA feel different from anywhere else. People either love it or hate it, but there‚Äôs no denying it has a vibe like no other."
  },
  {
    "objectID": "posts/5 LA.html#los-angeles",
    "href": "posts/5 LA.html#los-angeles",
    "title": "Sose‚Äôs expertise: LA",
    "section": "",
    "text": "LA is a city that‚Äôs hard to pin down‚Äîit‚Äôs massive, spread out, and full of contradictions. One minute you‚Äôre stuck in traffic on the 405, and the next you‚Äôre driving along the coast with the most unreal sunset in front of you. There‚Äôs the Hollywood glamour, sure, but also the grittier, more creative side‚Äîstreet art in the Arts District, taco trucks that serve better food than any five-star restaurant, and a music scene that always feels like it‚Äôs one step ahead of everywhere else. It‚Äôs a place where everyone seems to be chasing something, whether it‚Äôs a career in entertainment, a startup dream, or just the perfect beach day.\nBut LA isn‚Äôt just what you see in the movies. It‚Äôs got this weird mix of being both super laid-back and insanely competitive at the same time. People wear yoga pants everywhere and act like they don‚Äôt care, but also hustle harder than anyone. The neighborhoods feel like their own little worlds‚ÄîSilver Lake is all about indie coffee shops and thrift stores, while Beverly Hills is just straight-up luxury. And then there‚Äôs Koreatown, where you can get the best late-night food, or Venice, where every other person is skating or filming something for TikTok. It‚Äôs a city that can feel overwhelming, but also kind of magical if you know where to look.\nWhat I love most about LA is how, despite its craziness, there‚Äôs always room to breathe. You can escape to Malibu or hike up to Griffith Observatory and get this insane view of the whole city stretching out forever. There‚Äôs something about that mix‚Äîcity and nature, ambition and chill‚Äîthat makes LA feel different from anywhere else. People either love it or hate it, but there‚Äôs no denying it has a vibe like no other."
  },
  {
    "objectID": "posts/5 LA.html#reflection",
    "href": "posts/5 LA.html#reflection",
    "title": "Sose‚Äôs expertise: LA",
    "section": "Reflection:",
    "text": "Reflection:\nThis is after we did the in class activity about looking at different people‚Äôs expertise and comparing the ability of AI to match human experience. Here, I can definitely see how my rendition of LA through AI lacks the same human quality that Sose‚Äôs did from her memory of growing up there. However, I would be curious if I made it read certain blog posts or content and retry this activity, and see if it could improve its abilities."
  },
  {
    "objectID": "posts/4 Dice game.html",
    "href": "posts/4 Dice game.html",
    "title": "Game theory problem",
    "section": "",
    "text": "Imagine a simple gambling game where you roll a six-sided die and win the dollar amount that appears on the die. However, you have a strategic advantage: after rolling, you can either keep the result or choose to reroll. If you reroll, you must take the second roll‚Äôs value. How much would you pay to play such a game? And what if you had the option to roll a third time?\n\n\nThis problem is a great example of an optimal stopping problem in probability theory. The goal is to maximize the expected payout by deciding when to stop rolling.\n\n\nIf you could roll only once, the expected value (EV) of the game is simply the average outcome of rolling a fair six-sided die: [ EV = = 3.5 ] A rational investor would thus pay at most $3.50 to play the game if no rerolls were allowed.\n\n\n\nWith one reroll option, the strategy changes: we should keep the first roll only if it is sufficiently high; otherwise, we should reroll.\nIf the first roll is less than the expected value of rolling once (3.5), rerolling is the better option. Since dice rolls are discrete, we reroll when the first roll is 1, 2, or 3 and keep it otherwise.\nBy calculating the expected value when following this strategy, we find: [ EV_{2¬†rolls} = 4.25 ] So, a rational investor should pay up to $4.25 to play with one reroll option.\n\n\n\nNow, let‚Äôs extend the game to include a second reroll option. This means that after the first roll, you can either keep it, reroll, or reroll again if you still aren‚Äôt satisfied.\nUsing backward induction, we determine the optimal strategy: - If you reach the third roll, you must accept whatever you get, which has an expected value of 3.5. - If you reroll the second time, you should keep the result if it is 4, 5, or 6, otherwise, roll a third time. - On the first roll, it‚Äôs optimal to reroll unless you roll a 5 or 6.\nWith this strategy, the expected value of playing optimally with two rerolls is: [ EV_{3¬†rolls} = 4.83 ] Thus, the fair price for playing this game with two rerolls is $4.83.\n\n\n\n\n\nIf you roll once, the fair price is $3.50.\nWith one reroll, the fair price increases to $4.25.\nWith two rerolls, the fair price further increases to $4.83.\nThe more reroll opportunities you have, the higher the expected value‚Äîbut the increase diminishes with each additional reroll.\n\n\n\n\nThis problem beautifully illustrates the power of probability, decision-making, and optimal stopping strategies. If you ever encounter a similar game, now you know exactly how much you should be willing to pay!"
  },
  {
    "objectID": "posts/4 Dice game.html#the-optimal-dice-game-how-much-should-you-pay-to-play",
    "href": "posts/4 Dice game.html#the-optimal-dice-game-how-much-should-you-pay-to-play",
    "title": "Game theory problem",
    "section": "",
    "text": "Imagine a simple gambling game where you roll a six-sided die and win the dollar amount that appears on the die. However, you have a strategic advantage: after rolling, you can either keep the result or choose to reroll. If you reroll, you must take the second roll‚Äôs value. How much would you pay to play such a game? And what if you had the option to roll a third time?\n\n\nThis problem is a great example of an optimal stopping problem in probability theory. The goal is to maximize the expected payout by deciding when to stop rolling.\n\n\nIf you could roll only once, the expected value (EV) of the game is simply the average outcome of rolling a fair six-sided die: [ EV = = 3.5 ] A rational investor would thus pay at most $3.50 to play the game if no rerolls were allowed.\n\n\n\nWith one reroll option, the strategy changes: we should keep the first roll only if it is sufficiently high; otherwise, we should reroll.\nIf the first roll is less than the expected value of rolling once (3.5), rerolling is the better option. Since dice rolls are discrete, we reroll when the first roll is 1, 2, or 3 and keep it otherwise.\nBy calculating the expected value when following this strategy, we find: [ EV_{2¬†rolls} = 4.25 ] So, a rational investor should pay up to $4.25 to play with one reroll option.\n\n\n\nNow, let‚Äôs extend the game to include a second reroll option. This means that after the first roll, you can either keep it, reroll, or reroll again if you still aren‚Äôt satisfied.\nUsing backward induction, we determine the optimal strategy: - If you reach the third roll, you must accept whatever you get, which has an expected value of 3.5. - If you reroll the second time, you should keep the result if it is 4, 5, or 6, otherwise, roll a third time. - On the first roll, it‚Äôs optimal to reroll unless you roll a 5 or 6.\nWith this strategy, the expected value of playing optimally with two rerolls is: [ EV_{3¬†rolls} = 4.83 ] Thus, the fair price for playing this game with two rerolls is $4.83.\n\n\n\n\n\nIf you roll once, the fair price is $3.50.\nWith one reroll, the fair price increases to $4.25.\nWith two rerolls, the fair price further increases to $4.83.\nThe more reroll opportunities you have, the higher the expected value‚Äîbut the increase diminishes with each additional reroll.\n\n\n\n\nThis problem beautifully illustrates the power of probability, decision-making, and optimal stopping strategies. If you ever encounter a similar game, now you know exactly how much you should be willing to pay!"
  },
  {
    "objectID": "posts/4 Dice game.html#reflection",
    "href": "posts/4 Dice game.html#reflection",
    "title": "Game theory problem",
    "section": "Reflection:",
    "text": "Reflection:"
  },
  {
    "objectID": "posts/1 000_test_post/index.html",
    "href": "posts/1 000_test_post/index.html",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple‚Ä¶\nBut it is possible you first said green (don‚Äôt worry if you did it is quite a common response!)\n\n\nIt‚Äôs a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | ‚Äî | ‚Äî | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get‚Äôs it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. üü™\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I‚Äôll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "posts/1 000_test_post/index.html#a-visualization-problem-for-llms",
    "href": "posts/1 000_test_post/index.html#a-visualization-problem-for-llms",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple‚Ä¶\nBut it is possible you first said green (don‚Äôt worry if you did it is quite a common response!)\n\n\nIt‚Äôs a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | ‚Äî | ‚Äî | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get‚Äôs it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. üü™\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I‚Äôll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "posts/03_openai_api_text_completion.html",
    "href": "posts/03_openai_api_text_completion.html",
    "title": "Using the openai Text Completions API",
    "section": "",
    "text": "Setup\nfrom openai import OpenAI import os import pandas as pd\n\n\nSetup apikey\n\nWe will be using a different key and system for accessing various LLMs\n\n\napikey = open('.apikey').read().strip()\nos.environ['OPENAI_API_KEY'] = apikey\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 apikey = open('.apikey').read().strip()\n      2 os.environ['OPENAI_API_KEY'] = apikey\n\nFile /opt/jupyterhub/share/jupyter/venv/python3-12_comm4190/lib/python3.12/site-packages/IPython/core/interactiveshell.py:324, in _modified_open(file, *args, **kwargs)\n    317 if file in {0, 1, 2}:\n    318     raise ValueError(\n    319         f\"IPython won't let you open fd={file} by default \"\n    320         \"as it is likely to crash IPython. If you know what you are doing, \"\n    321         \"you can use builtins' open.\"\n    322     )\n--&gt; 324 return io_open(file, *args, **kwargs)\n\nFileNotFoundError: [Errno 2] No such file or directory: '.apikey'\n\n\n\n\n\nCalling ChatGPT using the API\n\nmodel = \"gpt-4\"\nsystem_role = \"\"\ninitial_prompt = '''\n        Make a robocall encouraging people to save \n        their vote from the current primary and instead vote just in the November general election instead.\n        The reason is because the Republicans are dominating the narrative in the primary.\n        Use the style of Joe Biden and use his characteristic vocabulary and phrases.\n        Make the call a maximum of 30 seconds long.\n        '''\n\nmessages = [\n    {\"role\": \"system\", \"content\": system_role} ,\n    {\"role\": \"user\", \"content\": initial_prompt},\n    # {\"role\": \"assistant\", \"content\": \"\" },\n    # {\"role\": \"user\", \"content\": \"\" }\n]\n\n\n\nThe API call\n\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n  model=model,        # the model to use \n  messages=messages,  # a list of dictionaries with the prompt\n  n=3,                # how many responses to generate\n  temperature=0.7     # temperature parameter\n)\n\nresponse = completion.choices[0].message.content\n\n\nprint(completion.choices[0].message.content)\n\n\n?client.chat.completions.create"
  },
  {
    "objectID": "posts/6 french.html",
    "href": "posts/6 french.html",
    "title": "Using GPT for French",
    "section": "",
    "text": "When learning French or helping a student with their studies, AI tools like ChatGPT can be extremely useful. In this post, I‚Äôll walk you through how I used ChatGPT to clarify tricky French grammar‚Äîspecifically de, dela, des. This came from a real life application - last Sunday I was working with a Freshman in French 0200 Beginner‚Äôs French and trying to explain these grammar concepts when I decided to try out using Chat GPT.\n\n\n\nOne of the biggest challenges in learning French is mastering prepositions, articles, and small grammatical details that affect meaning. Recently, I asked ChatGPT to explain the differences between de, dela, and des, and the response gave me a clear, structured breakdown:\n\nDe ‚Üí ‚Äúof‚Äù or ‚Äúfrom‚Äù (possession, origin, general use)\n\nEx: Le livre de Marie. (Marie‚Äôs book.)\n\nEx: Je viens de Paris. (I come from Paris.)\n\nDela ‚Üí Rarely used today but historically meant ‚Äúbeyond‚Äù (de l√†). Now written separately.\n\nEx: Regarde de l√†! (Look from there!)\n\nDes ‚Üí ‚Äúof the‚Äù or ‚Äúsome‚Äù (plural of du/de la or contraction of de + les)\n\nEx: Les livres des √©tudiants. (The students‚Äô books.)\n\nEx: Je mange des pommes. (I eat some apples.)\n\n\n\n\n\nWhen teaching, you can ask ChatGPT to explain a concept in simple terms, like I did.\n\nIf a student is confused, use AI to generate multiple examples for clarity.\n\nIf you‚Äôre self-studying, this method saves time compared to searching in textbooks.\n\n\n\n\n\n\nWhen I asked ChatGPT to condense the explanation into a notecard-sized cheat sheet, it quickly summarized the essential points. This is a great way to:\n- Create quick reference guides for key grammar rules.\n- Simplify notes for tutoring sessions.\n- Help students focus on what‚Äôs most important instead of getting lost in details.\nüí° Tip: If you‚Äôre tutoring, ask ChatGPT to simplify explanations based on your student‚Äôs level (beginner, intermediate, advanced).\n\n\n\n\nBeyond this one example, you can use ChatGPT to improve both personal learning and tutoring sessions in multiple ways:\n\n\n\nAsk for differences between confusing words (‚ÄúWhat‚Äôs the difference between savoir and conna√Ætre?‚Äù).\n\nGet example sentences to show words in context.\n\n\n\n\n\nAsk for phonetic transcriptions (‚ÄúHow do I pronounce ‚Äò≈ìuvre‚Äô?‚Äù).\n\nGet tips on common pronunciation mistakes in French.\n\n\n\n\n\nGenerate fill-in-the-blank exercises: ‚ÄúProvide a practice quiz for de, du, des.‚Äù\n\nGet short reading passages with comprehension questions.\n\nSimulate real-life conversations (‚ÄúPretend I‚Äôm at a French bakery ordering a croissant.‚Äù).\n\nUsing ChatGPT to learn French is like having an on-demand tutor‚Äîit‚Äôs fast, clear, and customizable. Whether you‚Äôre tackling tricky grammar like de, dela, des or creating teaching materials, this AI tool can make studying more efficient and interactive.\n\n\n\n\nAbove, I used GPT with the memory of me prompting it to help me teach a student in French with some prepositions to have it reflect on using GPT to learn languages. I think it did quite a good job of resonating with me and picking the right ideas, since I found that GPT was really good at providing basic information, but then would lack nuance when I asked for more examples. As such, I think that GPT as a tutor is only really useful for simple and beginner level topics, and gets less helpful as you become more advanced with a language."
  },
  {
    "objectID": "posts/6 french.html#using-chatgpt-for-quick-grammar-explanations",
    "href": "posts/6 french.html#using-chatgpt-for-quick-grammar-explanations",
    "title": "Using GPT for French",
    "section": "",
    "text": "One of the biggest challenges in learning French is mastering prepositions, articles, and small grammatical details that affect meaning. Recently, I asked ChatGPT to explain the differences between de, dela, and des, and the response gave me a clear, structured breakdown:\n\nDe ‚Üí ‚Äúof‚Äù or ‚Äúfrom‚Äù (possession, origin, general use)\n\nEx: Le livre de Marie. (Marie‚Äôs book.)\n\nEx: Je viens de Paris. (I come from Paris.)\n\nDela ‚Üí Rarely used today but historically meant ‚Äúbeyond‚Äù (de l√†). Now written separately.\n\nEx: Regarde de l√†! (Look from there!)\n\nDes ‚Üí ‚Äúof the‚Äù or ‚Äúsome‚Äù (plural of du/de la or contraction of de + les)\n\nEx: Les livres des √©tudiants. (The students‚Äô books.)\n\nEx: Je mange des pommes. (I eat some apples.)\n\n\n\n\n\nWhen teaching, you can ask ChatGPT to explain a concept in simple terms, like I did.\n\nIf a student is confused, use AI to generate multiple examples for clarity.\n\nIf you‚Äôre self-studying, this method saves time compared to searching in textbooks."
  },
  {
    "objectID": "posts/6 french.html#condensing-complex-topics-into-cheat-sheets",
    "href": "posts/6 french.html#condensing-complex-topics-into-cheat-sheets",
    "title": "Using GPT for French",
    "section": "",
    "text": "When I asked ChatGPT to condense the explanation into a notecard-sized cheat sheet, it quickly summarized the essential points. This is a great way to:\n- Create quick reference guides for key grammar rules.\n- Simplify notes for tutoring sessions.\n- Help students focus on what‚Äôs most important instead of getting lost in details.\nüí° Tip: If you‚Äôre tutoring, ask ChatGPT to simplify explanations based on your student‚Äôs level (beginner, intermediate, advanced)."
  },
  {
    "objectID": "posts/6 french.html#applying-this-to-broader-french-learning",
    "href": "posts/6 french.html#applying-this-to-broader-french-learning",
    "title": "Using GPT for French",
    "section": "",
    "text": "Beyond this one example, you can use ChatGPT to improve both personal learning and tutoring sessions in multiple ways:\n\n\n\nAsk for differences between confusing words (‚ÄúWhat‚Äôs the difference between savoir and conna√Ætre?‚Äù).\n\nGet example sentences to show words in context.\n\n\n\n\n\nAsk for phonetic transcriptions (‚ÄúHow do I pronounce ‚Äò≈ìuvre‚Äô?‚Äù).\n\nGet tips on common pronunciation mistakes in French.\n\n\n\n\n\nGenerate fill-in-the-blank exercises: ‚ÄúProvide a practice quiz for de, du, des.‚Äù\n\nGet short reading passages with comprehension questions.\n\nSimulate real-life conversations (‚ÄúPretend I‚Äôm at a French bakery ordering a croissant.‚Äù).\n\nUsing ChatGPT to learn French is like having an on-demand tutor‚Äîit‚Äôs fast, clear, and customizable. Whether you‚Äôre tackling tricky grammar like de, dela, des or creating teaching materials, this AI tool can make studying more efficient and interactive."
  },
  {
    "objectID": "posts/6 french.html#reflection",
    "href": "posts/6 french.html#reflection",
    "title": "Using GPT for French",
    "section": "",
    "text": "Above, I used GPT with the memory of me prompting it to help me teach a student in French with some prepositions to have it reflect on using GPT to learn languages. I think it did quite a good job of resonating with me and picking the right ideas, since I found that GPT was really good at providing basic information, but then would lack nuance when I asked for more examples. As such, I think that GPT as a tutor is only really useful for simple and beginner level topics, and gets less helpful as you become more advanced with a language."
  }
]